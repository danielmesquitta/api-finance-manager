basePath: /api
definitions:
  dto.CashVsInstallmentsRequest:
    properties:
      cash_discount:
        minimum: 0
        type: integer
      cashback:
        maximum: 10000
        minimum: 0
        type: integer
      credit_card_interest:
        maximum: 10000
        minimum: 0
        type: integer
      installments:
        minimum: 1
        type: integer
      interest:
        maximum: 10000
        minimum: 0
        type: integer
      interest_type:
        allOf:
        - $ref: '#/definitions/entity.InterestType'
        enum:
        - MONTHLY
        - ANNUAL
      purchase_value:
        minimum: 0
        type: integer
    required:
    - installments
    - interest
    - interest_type
    - purchase_value
    type: object
  dto.CashVsInstallmentsResponse:
    properties:
      cash_flow_by_month:
        additionalProperties:
          $ref: '#/definitions/usecase.CashFlow'
        type: object
      savings_with_cash:
        type: integer
      savings_with_credit_card:
        type: integer
    type: object
  dto.CompoundInterestRequest:
    properties:
      initial_deposit:
        type: integer
      interest:
        maximum: 10000
        minimum: 0
        type: integer
      interest_type:
        allOf:
        - $ref: '#/definitions/entity.InterestType'
        enum:
        - MONTHLY
        - ANNUAL
      monthly_deposit:
        type: integer
      period_in_months:
        minimum: 1
        type: integer
    required:
    - interest
    - interest_type
    - period_in_months
    type: object
  dto.CompoundInterestResponse:
    properties:
      by_month:
        additionalProperties:
          $ref: '#/definitions/usecase.CompoundInterestResult'
        type: object
      total_amount:
        type: integer
      total_deposit:
        type: integer
      total_interest:
        type: integer
    type: object
  dto.CreateAIChatResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  dto.CreateAccountsRequest:
    properties:
      clientUserId:
        type: string
      connector:
        $ref: '#/definitions/usecase.CreateAccountsInstitution'
      executionStatus:
        type: string
      id:
        type: string
    required:
    - clientUserId
    - connector
    - executionStatus
    - id
    type: object
  dto.CreateFeedbackRequest:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  dto.CreateTransactionRequest:
    properties:
      amount:
        type: integer
      category_id:
        type: string
      date:
        type: string
      name:
        type: string
      payment_method_id:
        type: string
    required:
    - amount
    - date
    - name
    - payment_method_id
    type: object
  dto.EmergencyReserveRequest:
    properties:
      job_type:
        allOf:
        - $ref: '#/definitions/entity.JobType'
        enum:
        - ENTREPRENEUR
        - EMPLOYEE
        - CIVIL_SERVANT
      monthly_expenses:
        minimum: 0
        type: integer
      monthly_income:
        minimum: 0
        type: integer
      monthly_savings_percentage:
        maximum: 10000
        minimum: 0
        type: integer
    required:
    - job_type
    type: object
  dto.EmergencyReserveResponse:
    properties:
      months_to_achieve_emergency_reserve:
        type: integer
      recommended_reserve_in_months:
        type: integer
      recommended_reserve_in_value:
        type: integer
    type: object
  dto.ErrorItem:
    properties:
      name:
        type: string
      reason:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/dto.ErrorItem'
        type: array
      message:
        type: string
    type: object
  dto.GetBalanceResponse:
    properties:
      balance_percentage_variation:
        type: integer
      comparison_dates:
        $ref: '#/definitions/usecase.ComparisonDates'
      current_balance:
        type: integer
      current_expense:
        type: integer
      current_income:
        type: integer
      expense_percentage_variation:
        type: integer
      income_percentage_variation:
        type: integer
      previous_balance:
        type: integer
      previous_expense:
        type: integer
      previous_income:
        type: integer
    type: object
  dto.GetBudgetCategoryResponse:
    properties:
      amount:
        type: integer
      available:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      external_id:
        type: string
      id:
        type: string
      name:
        type: string
      spent:
        type: integer
      updated_at:
        type: string
    type: object
  dto.GetBudgetResponse:
    properties:
      amount:
        type: integer
      available:
        type: integer
      available_per_day:
        type: integer
      available_per_day_percentage_variation:
        type: integer
      available_percentage_variation:
        type: integer
      budget_categories:
        items:
          $ref: '#/definitions/usecase.GetBudgetBudgetCategories'
        type: array
      comparison_dates:
        $ref: '#/definitions/usecase.ComparisonDates'
      created_at:
        type: string
      date:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      spent:
        type: integer
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  dto.GetTransactionResponse:
    properties:
      account_id:
        type: string
      amount:
        type: integer
      category_id:
        type: string
      category_name:
        type: string
      created_at:
        type: string
      date:
        type: string
      deleted_at:
        type: string
      external_id:
        type: string
      id:
        type: string
      institution_id:
        type: string
      institution_logo:
        type: string
      institution_name:
        type: string
      is_ignored:
        type: boolean
      name:
        type: string
      payment_method_id:
        type: string
      payment_method_name:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  dto.HealthResponse:
    properties:
      status:
        type: string
    type: object
  dto.ListAIChatMessagesResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/entity.AIChatMessage'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.ListAIChatsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/entity.AIChat'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.ListCategoriesResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/entity.TransactionCategory'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.ListInstitutionsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/entity.Institution'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.ListPaymentMethodsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/entity.PaymentMethod'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.ListTransactionsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/entity.FullTransaction'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.RetirementRequest:
    properties:
      age:
        minimum: 0
        type: integer
      goal_income:
        minimum: 0
        type: integer
      goal_patrimony:
        minimum: 0
        type: integer
      income_investment_percentage:
        maximum: 10000
        minimum: 0
        type: integer
      initial_deposit:
        type: integer
      interest:
        maximum: 10000
        minimum: 0
        type: integer
      interest_type:
        allOf:
        - $ref: '#/definitions/entity.InterestType'
        enum:
        - MONTHLY
        - ANNUAL
      life_expectancy:
        minimum: 1
        type: integer
      monthly_income:
        minimum: 0
        type: integer
      retirement_age:
        minimum: 1
        type: integer
    required:
    - age
    - goal_income
    - goal_patrimony
    - income_investment_percentage
    - interest
    - interest_type
    - life_expectancy
    - monthly_income
    - retirement_age
    type: object
  dto.RetirementResponse:
    properties:
      achieved_goal_income:
        type: boolean
      achieved_goal_patrimony:
        type: boolean
      exceeded_goal:
        type: boolean
      exceeded_goal_amount:
        type: integer
      heritage:
        type: integer
      max_monthly_expenses:
        type: integer
      property_on_retirement:
        type: integer
    type: object
  dto.SignInRequest:
    properties:
      provider:
        allOf:
        - $ref: '#/definitions/entity.Provider'
        enum:
        - GOOGLE
        - APPLE
        - REFRESH
        - MOCK
    required:
    - provider
    type: object
  dto.SignInResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/entity.User'
    type: object
  dto.SimpleInterestRequest:
    properties:
      initial_deposit:
        minimum: 0
        type: integer
      interest:
        maximum: 10000
        minimum: 0
        type: integer
      interest_type:
        allOf:
        - $ref: '#/definitions/entity.InterestType'
        enum:
        - MONTHLY
        - ANNUAL
      period_in_months:
        minimum: 1
        type: integer
    required:
    - interest
    - interest_type
    - period_in_months
    type: object
  dto.SimpleInterestResponse:
    properties:
      by_month:
        additionalProperties:
          $ref: '#/definitions/usecase.SimpleInterestResult'
        type: object
      total_amount:
        type: integer
      total_deposit:
        type: integer
      total_interest:
        type: integer
    type: object
  dto.UpdateAIChatRequest:
    properties:
      title:
        type: string
    required:
    - title
    type: object
  dto.UpdateProfileRequest:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  dto.UpdateTransactionRequest:
    properties:
      account_id:
        type: string
      amount:
        type: integer
      category_id:
        type: string
      date:
        type: string
      id:
        type: string
      institution_id:
        type: string
      name:
        type: string
      payment_method_id:
        type: string
    required:
    - id
    type: object
  dto.UpsertBudgetRequest:
    properties:
      amount:
        type: integer
      categories:
        items:
          $ref: '#/definitions/usecase.UpsertBudgetCategoryInput'
        type: array
      date:
        type: string
    required:
    - amount
    - date
    type: object
  dto.UserProfileResponse:
    properties:
      auth_id:
        type: string
      avatar:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      open_finance_id:
        type: string
      provider:
        type: string
      subscription_expires_at:
        type: string
      synchronized_at:
        type: string
      tier:
        type: string
      updated_at:
        type: string
      verified_email:
        type: boolean
    type: object
  entity.AIChat:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  entity.AIChatMessage:
    properties:
      ai_chat_id:
        type: string
      created_at:
        type: string
      created_by_user_id:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      message:
        type: string
      updated_at:
        type: string
    type: object
  entity.FullTransaction:
    properties:
      account_id:
        type: string
      amount:
        type: integer
      category_id:
        type: string
      category_name:
        type: string
      created_at:
        type: string
      date:
        type: string
      deleted_at:
        type: string
      external_id:
        type: string
      id:
        type: string
      institution_id:
        type: string
      institution_logo:
        type: string
      institution_name:
        type: string
      is_ignored:
        type: boolean
      name:
        type: string
      payment_method_id:
        type: string
      payment_method_name:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  entity.Institution:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      external_id:
        type: string
      id:
        type: string
      logo:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  entity.InterestType:
    enum:
    - MONTHLY
    - ANNUAL
    type: string
    x-enum-varnames:
    - InterestTypeMonthly
    - InterestTypeAnnual
  entity.JobType:
    enum:
    - ENTREPRENEUR
    - EMPLOYEE
    - CIVIL_SERVANT
    type: string
    x-enum-varnames:
    - JobTypeEntrepreneur
    - JobTypeEmployee
    - JobTypeCivilServant
  entity.PaymentMethod:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      external_id:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  entity.Provider:
    enum:
    - GOOGLE
    - APPLE
    - REFRESH
    - MOCK
    type: string
    x-enum-varnames:
    - ProviderGoogle
    - ProviderApple
    - ProviderRefresh
    - ProviderMock
  entity.TransactionCategory:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      external_id:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  entity.User:
    properties:
      auth_id:
        type: string
      avatar:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      open_finance_id:
        type: string
      provider:
        type: string
      subscription_expires_at:
        type: string
      synchronized_at:
        type: string
      tier:
        type: string
      updated_at:
        type: string
      verified_email:
        type: boolean
    type: object
  usecase.CashFlow:
    properties:
      cash:
        type: integer
      credit_card:
        type: integer
    type: object
  usecase.ComparisonDates:
    properties:
      comparison_end_date:
        type: string
      comparison_start_date:
        type: string
      end_date:
        type: string
      start_date:
        type: string
    type: object
  usecase.CompoundInterestResult:
    properties:
      monthly_interest:
        type: integer
      total_amount:
        type: integer
      total_deposit:
        type: integer
      total_interest:
        type: integer
    type: object
  usecase.CreateAccountsInstitution:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  usecase.GetBudgetBudgetCategories:
    properties:
      amount:
        type: integer
      available:
        type: integer
      budget_id:
        type: string
      category:
        $ref: '#/definitions/entity.TransactionCategory'
      category_id:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      spent:
        type: integer
      updated_at:
        type: string
    type: object
  usecase.SimpleInterestResult:
    properties:
      total_amount:
        type: integer
      total_deposit:
        type: integer
      total_interest:
        type: integer
    type: object
  usecase.UpsertBudgetCategoryInput:
    properties:
      amount:
        type: integer
      category_id:
        type: string
    required:
    - amount
    - category_id
    type: object
info:
  contact:
    email: danielmesquitta123@gmail.com
    name: Daniel Mesquita
  description: API Finance Manager
  title: API Finance Manager
  version: "1.0"
paths:
  /v1/admin/accounts:
    post:
      consumes:
      - application/json
      description: Webhook to sync user accounts from open finance
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccountsRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Sync accounts from open finance
      tags:
      - Account
  /v1/admin/balances/sync:
    post:
      consumes:
      - application/json
      description: Sync account balances from open finance
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Sync account balances from open finance
      tags:
      - Balance
  /v1/admin/institutions/sync:
    post:
      consumes:
      - application/json
      description: Sync institutions from open finance
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Sync institutions from open finance
      tags:
      - Institution
  /v1/admin/transactions/categories/sync:
    post:
      consumes:
      - application/json
      description: Sync categories from open finance
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Sync categories from open finance
      tags:
      - Category
  /v1/admin/transactions/sync:
    post:
      consumes:
      - application/json
      description: Webhook to sync transactions from open finance
      parameters:
      - collectionFormat: csv
        description: User IDs
        in: query
        items:
          type: string
        name: user_ids
        type: array
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Sync transactions from open finance
      tags:
      - Transaction
  /v1/ai-chats:
    get:
      consumes:
      - application/json
      description: List ai chats
      parameters:
      - description: Search
        in: query
        name: search
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListAIChatsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List ai chats
      tags:
      - AI Chat
    post:
      consumes:
      - application/json
      description: Create ai chat
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateAIChatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create ai chat
      tags:
      - AI Chat
  /v1/ai-chats/{ai_chat_id}:
    delete:
      consumes:
      - application/json
      description: Delete ai chat
      parameters:
      - description: AI Chat ID
        format: uuid
        in: path
        name: ai_chat_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete ai chat
      tags:
      - AI Chat
    put:
      consumes:
      - application/json
      description: Update ai chat
      parameters:
      - description: AI Chat ID
        format: uuid
        in: path
        name: ai_chat_id
        required: true
        type: string
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAIChatRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update ai chat
      tags:
      - AI Chat
  /v1/ai-chats/{ai_chat_id}/messages:
    get:
      consumes:
      - application/json
      description: List ai chat messages
      parameters:
      - description: AI Chat ID
        format: uuid
        in: path
        name: ai_chat_id
        required: true
        type: string
      - description: Search
        in: query
        name: search
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListAIChatMessagesResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List ai chat messages
      tags:
      - AI Chat
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Use refresh token to generate new access token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Refresh token
      tags:
      - Auth
  /v1/auth/sign-in:
    post:
      consumes:
      - application/json
      description: Health check
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Health check
      tags:
      - Health
  /v1/balances:
    get:
      consumes:
      - application/json
      description: Gets user total balance and transactions monthly balance with previous
        month comparison
      parameters:
      - description: Search
        in: query
        name: search
        type: string
      - description: Start date
        format: date
        in: query
        name: start_date
        type: string
      - description: End date
        format: date
        in: query
        name: end_date
        type: string
      - collectionFormat: csv
        description: Institution IDs
        in: query
        items:
          type: string
        name: institution_ids
        type: array
      - collectionFormat: csv
        description: Category IDs
        in: query
        items:
          type: string
        name: category_ids
        type: array
      - collectionFormat: csv
        description: Payment method IDs
        in: query
        items:
          type: string
        name: payment_method_ids
        type: array
      - description: Filter only expenses
        in: query
        name: is_expense
        type: boolean
      - description: Filter only incomes
        in: query
        name: is_income
        type: boolean
      - description: Filter ignored or not ignored transactions
        in: query
        name: is_ignored
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetBalanceResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get balance
      tags:
      - Balance
  /v1/budgets:
    delete:
      consumes:
      - application/json
      description: Delete budget
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete budget
      tags:
      - Budget
    get:
      consumes:
      - application/json
      description: Get budget
      parameters:
      - description: Date
        format: date
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetBudgetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get budget
      tags:
      - Budget
    post:
      consumes:
      - application/json
      description: Create or update budget
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpsertBudgetRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create or update budget
      tags:
      - Budget
  /v1/budgets/categories/{category_id}:
    get:
      consumes:
      - application/json
      description: Get budget category
      parameters:
      - description: Category ID
        format: uuid
        in: path
        name: category_id
        required: true
        type: string
      - description: Date
        format: date
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetBudgetCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get budget category
      tags:
      - Budget
  /v1/budgets/categories/{category_id}/transactions:
    get:
      consumes:
      - application/json
      description: List budget category transactions
      parameters:
      - description: Category ID
        format: uuid
        in: path
        name: category_id
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Date
        format: date
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListTransactionsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List budget category transactions
      tags:
      - Budget
  /v1/calculator/cash-vs-installments:
    post:
      consumes:
      - application/json
      description: Calculate cash vs installments
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CashVsInstallmentsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CashVsInstallmentsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Calculate cash vs installments
      tags:
      - Calculator
  /v1/calculator/compound-interest:
    post:
      consumes:
      - application/json
      description: Calculate compound interest
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CompoundInterestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CompoundInterestResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Calculate compound interest
      tags:
      - Calculator
  /v1/calculator/emergency-reserve:
    post:
      consumes:
      - application/json
      description: Calculate emergency reserve
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.EmergencyReserveRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EmergencyReserveResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Calculate emergency reserve
      tags:
      - Calculator
  /v1/calculator/retirement:
    post:
      consumes:
      - application/json
      description: Calculate investments needed for retirement
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RetirementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RetirementResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Calculate retirement
      tags:
      - Calculator
  /v1/calculator/simple-interest:
    post:
      consumes:
      - application/json
      description: Calculate simple interest
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SimpleInterestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SimpleInterestResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Calculate simple interest
      tags:
      - Calculator
  /v1/feedbacks:
    post:
      consumes:
      - application/json
      description: Create feedback
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateFeedbackRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create feedback
      tags:
      - Feedback
  /v1/institutions:
    get:
      consumes:
      - application/json
      description: List all institutions
      parameters:
      - description: Search
        in: query
        name: search
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListInstitutionsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List institutions
      tags:
      - Institution
  /v1/payment-methods:
    get:
      consumes:
      - application/json
      description: List payment methods
      parameters:
      - description: Search
        in: query
        name: search
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListPaymentMethodsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List payment methods
      tags:
      - Payment Method
  /v1/transactions:
    get:
      consumes:
      - application/json
      description: List transactions
      parameters:
      - description: Search
        in: query
        name: search
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Start date
        format: date
        in: query
        name: start_date
        type: string
      - description: End date
        format: date
        in: query
        name: end_date
        type: string
      - collectionFormat: csv
        description: Institution IDs
        in: query
        items:
          type: string
        name: institution_ids
        type: array
      - collectionFormat: csv
        description: Category IDs
        in: query
        items:
          type: string
        name: category_ids
        type: array
      - collectionFormat: csv
        description: Payment method IDs
        in: query
        items:
          type: string
        name: payment_method_ids
        type: array
      - description: Filter only expenses
        in: query
        name: is_expense
        type: boolean
      - description: Filter only incomes
        in: query
        name: is_income
        type: boolean
      - description: Filter ignored or not ignored transactions
        in: query
        name: is_ignored
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListTransactionsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List transactions
      tags:
      - Transaction
    post:
      consumes:
      - application/json
      description: Create transactions
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create transactions
      tags:
      - Transaction
  /v1/transactions/{transaction_id}:
    get:
      consumes:
      - application/json
      description: Get transaction
      parameters:
      - description: Transaction ID
        format: uuid
        in: path
        name: transaction_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetTransactionResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get transaction
      tags:
      - Transaction
    put:
      consumes:
      - application/json
      description: Update transaction
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTransactionRequest'
      - description: Transaction ID
        format: uuid
        in: path
        name: transaction_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update transaction
      tags:
      - Transaction
  /v1/transactions/categories:
    get:
      consumes:
      - application/json
      description: List categories
      parameters:
      - description: Search
        in: query
        name: search
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListCategoriesResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List categories
      tags:
      - Category
  /v1/users/institutions:
    get:
      consumes:
      - application/json
      description: List user institutions
      parameters:
      - description: Search
        in: query
        name: search
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListInstitutionsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user institutions
      tags:
      - Institution
  /v1/users/profile:
    delete:
      consumes:
      - application/json
      description: Delete logged-in user
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete logged-in user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get logged-in user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get logged-in user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update logged-in user
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update logged-in user
      tags:
      - User
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
