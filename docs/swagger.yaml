basePath: /api
definitions:
  dto.CompoundInterestRequest:
    properties:
      initial_deposit:
        minimum: 0
        type: number
      interest:
        maximum: 100
        minimum: 0
        type: number
      interest_type:
        allOf:
        - $ref: '#/definitions/entity.InterestType'
        enum:
        - MONTHLY
        - ANNUAL
      monthly_deposit:
        type: number
      period_in_months:
        minimum: 1
        type: integer
    required:
    - interest
    - interest_type
    - period_in_months
    type: object
  dto.CompoundInterestResponse:
    properties:
      by_month:
        additionalProperties:
          $ref: '#/definitions/usecase.CompoundInterestResult'
        type: object
      total_amount:
        type: number
      total_deposit:
        type: number
      total_interest:
        type: number
    type: object
  dto.EmergencyReserveRequest:
    properties:
      jobType:
        allOf:
        - $ref: '#/definitions/entity.JobType'
        enum:
        - ENTREPRENEUR
        - EMPLOYEE
        - CIVIL_SERVANT
      monthlyExpenses:
        minimum: 0
        type: number
      monthlyIncome:
        minimum: 0
        type: number
      monthlySavingsPercentage:
        maximum: 100
        minimum: 0
        type: number
    required:
    - jobType
    type: object
  dto.EmergencyReserveResponse:
    properties:
      monthsToAchieveEmergencyReserve:
        type: integer
      recommendedReserveInMonths:
        type: integer
      recommendedReserveInValue:
        type: number
    type: object
  dto.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  dto.HealthResponse:
    properties:
      ok:
        type: boolean
    type: object
  dto.ListCategoriesResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/entity.Category'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.RetirementRequest:
    properties:
      age:
        minimum: 0
        type: integer
      goal_income:
        minimum: 0
        type: number
      goal_patrimony:
        minimum: 0
        type: number
      income_investment_percentage:
        maximum: 100
        minimum: 0
        type: number
      initial_deposit:
        minimum: 0
        type: number
      interest:
        maximum: 100
        minimum: 0
        type: number
      interest_type:
        allOf:
        - $ref: '#/definitions/entity.InterestType'
        enum:
        - MONTHLY
        - ANNUAL
      life_expectancy:
        minimum: 1
        type: integer
      monthly_income:
        minimum: 0
        type: number
      retirement_age:
        minimum: 1
        type: integer
    required:
    - age
    - goal_income
    - goal_patrimony
    - income_investment_percentage
    - initial_deposit
    - interest
    - interest_type
    - monthly_income
    - retirement_age
    type: object
  dto.RetirementResponse:
    properties:
      achieved_goal_income:
        type: boolean
      achieved_goal_patrimony:
        type: boolean
      heritage:
        type: number
      max_monthly_expenses:
        type: number
      property_on_retirement:
        type: number
    type: object
  dto.SignInRequest:
    properties:
      provider:
        $ref: '#/definitions/entity.Provider'
    type: object
  dto.SignInResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/entity.User'
    type: object
  dto.SimpleInterestRequest:
    properties:
      initialDeposit:
        minimum: 0
        type: number
      interest:
        maximum: 100
        minimum: 0
        type: number
      interestType:
        allOf:
        - $ref: '#/definitions/entity.InterestType'
        enum:
        - MONTHLY
        - ANNUAL
      periodInMonths:
        minimum: 1
        type: integer
    required:
    - interest
    - interestType
    - periodInMonths
    type: object
  dto.SimpleInterestResponse:
    properties:
      by_month:
        additionalProperties:
          $ref: '#/definitions/usecase.SimpleInterestResult'
        type: object
      total_amount:
        type: number
      total_deposit:
        type: number
      total_interest:
        type: number
    type: object
  dto.UpsertBudgetRequest:
    properties:
      amount:
        type: number
      categories:
        items:
          $ref: '#/definitions/usecase.UpsertBudgetCategoryInput'
        type: array
      user_id:
        type: string
    required:
    - amount
    - user_id
    type: object
  entity.Category:
    properties:
      created_at:
        type: string
      external_id:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  entity.InterestType:
    enum:
    - MONTHLY
    - ANNUAL
    type: string
    x-enum-varnames:
    - InterestTypeMonthly
    - InterestTypeAnnual
  entity.JobType:
    enum:
    - ENTREPRENEUR
    - EMPLOYEE
    - CIVIL_SERVANT
    type: string
    x-enum-varnames:
    - JobTypeEntrepreneur
    - JobTypeEmployee
    - JobTypeCivilServant
  entity.Provider:
    enum:
    - GOOGLE
    - APPLE
    - REFRESH
    - MOCK
    type: string
    x-enum-varnames:
    - ProviderGoogle
    - ProviderApple
    - ProviderRefresh
    - ProviderMock
  entity.User:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      external_id:
        type: string
      id:
        type: string
      name:
        type: string
      provider:
        type: string
      subscription_expires_at:
        type: string
      synchronized_at:
        type: string
      tier:
        type: string
      updated_at:
        type: string
      verified_email:
        type: boolean
    type: object
  usecase.CompoundInterestResult:
    properties:
      monthly_interest:
        type: number
      total_amount:
        type: number
      total_deposit:
        type: number
      total_interest:
        type: number
    type: object
  usecase.SimpleInterestResult:
    properties:
      total_amount:
        type: number
      total_deposit:
        type: number
      total_interest:
        type: number
    type: object
  usecase.UpsertBudgetCategoryInput:
    properties:
      amount:
        type: number
      category_id:
        type: string
    required:
    - amount
    - category_id
    type: object
info:
  contact:
    email: danielmesquitta123@gmail.com
    name: Daniel Mesquita
  description: API Finance Manager
  title: API Finance Manager
  version: "1.0"
paths:
  /health:
    get:
      consumes:
      - application/json
      description: Health check
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Health check
      tags:
      - Health
  /v1/admin/categories/sync:
    post:
      consumes:
      - application/json
      description: Sync categories from open finance
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Sync categories from open finance
      tags:
      - Category
  /v1/admin/institutions/sync:
    post:
      consumes:
      - application/json
      description: Sync institutions from open finance
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Sync institutions from open finance
      tags:
      - Institution
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Use refresh token to generate new access token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Refresh token
      tags:
      - Auth
  /v1/auth/sign-in:
    post:
      consumes:
      - application/json
      description: Authenticate user through Google or Apple token
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Sign in
      tags:
      - Auth
  /v1/budgets:
    post:
      consumes:
      - application/json
      description: Create or update budget
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpsertBudgetRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create or update budget
      tags:
      - Budget
  /v1/calculator/compound-interest:
    post:
      consumes:
      - application/json
      description: Calculate compound interest
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CompoundInterestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CompoundInterestResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Calculate compound interest
      tags:
      - Calculator
  /v1/calculator/emergency-reserve:
    post:
      consumes:
      - application/json
      description: Calculate emergency reserve
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.EmergencyReserveRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EmergencyReserveResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Calculate emergency reserve
      tags:
      - Calculator
  /v1/calculator/retirement:
    post:
      consumes:
      - application/json
      description: Calculate investments needed for retirement
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RetirementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RetirementResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Calculate retirement
      tags:
      - Calculator
  /v1/calculator/simple-interest:
    post:
      consumes:
      - application/json
      description: Calculate simple interest
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SimpleInterestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SimpleInterestResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Calculate simple interest
      tags:
      - Calculator
  /v1/categories:
    get:
      consumes:
      - application/json
      description: List categories
      parameters:
      - description: Search
        in: query
        name: search
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Page size
        in: query
        name: page_size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListCategoriesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List categories
      tags:
      - Category
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
