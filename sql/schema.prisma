datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [unaccent, fuzzystrmatch]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model User {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id             String
  provider                String
  name                    String
  email                   String    @unique
  verified_email          Boolean   @default(false)
  tier                    String    @default("FREE")
  avatar                  String?
  subscription_expires_at DateTime? @db.Timestamptz()
  synchronized_at         DateTime? @default(now()) @db.Timestamptz()
  created_at              DateTime  @default(now()) @db.Timestamptz()
  updated_at              DateTime  @default(now()) @db.Timestamptz()

  budgets Budget[]

  transactions Transaction[]

  investments Investment[]

  accounts Account[]

  @@map("users")
}

model Transaction {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id    String   @unique
  name           String
  description    String?
  amount         Float
  payment_method String   @default("UNKNOWN")
  is_ignored     Boolean  @default(false)
  date           DateTime @db.Timestamptz()
  created_at     DateTime @default(now()) @db.Timestamptz()
  updated_at     DateTime @default(now()) @db.Timestamptz()

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String @db.Uuid

  account    Account? @relation(fields: [account_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  account_id String?  @db.Uuid

  category    Category? @relation(fields: [category_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  category_id String?   @db.Uuid

  @@map("transactions")
}

// @TODO: Add more fields to Investment model
model Investment {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id String   @unique
  name        String
  amount      Float
  type        String   @default("UNKNOWN")
  rate        Float
  rateType    String   @default("UNKNOWN")
  created_at  DateTime @default(now()) @db.Timestamptz()
  updated_at  DateTime @default(now()) @db.Timestamptz()

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @db.Uuid

  @@map("investments")
}

model Category {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id String   @unique
  name        String
  created_at  DateTime @default(now()) @db.Timestamptz()
  updated_at  DateTime @default(now()) @db.Timestamptz()

  transactions Transaction[]

  budget_categories BudgetCategory[]

  @@map("categories")
}

model Account {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id String   @unique
  name        String
  balance     Float
  type        String   @default("UNKNOWN")
  created_at  DateTime @default(now()) @db.Timestamptz()
  updated_at  DateTime @default(now()) @db.Timestamptz()

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String @db.Uuid

  institution    Institution @relation(fields: [institution_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  institution_id String      @db.Uuid

  CreditCard CreditCard?

  transactions Transaction[]

  @@map("accounts")
}

model CreditCard {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  level           String
  brand           String
  limit           Float
  available_limit Float
  created_at      DateTime @default(now()) @db.Timestamptz()
  updated_at      DateTime @default(now()) @db.Timestamptz()

  account    Account @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  account_id String  @unique @db.Uuid

  @@map("credit_cards")
}

model Institution {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id String   @unique
  name        String
  logo        String?
  created_at  DateTime @default(now()) @db.Timestamptz()
  updated_at  DateTime @default(now()) @db.Timestamptz()

  accounts Account[]

  @@map("institutions")
}

model Budget {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount     Float
  date       DateTime @db.Timestamptz()
  created_at DateTime @default(now()) @db.Timestamptz()
  updated_at DateTime @default(now()) @db.Timestamptz()

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String @db.Uuid

  budget_categories BudgetCategory[]

  @@map("budgets")
}

model BudgetCategory {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount     Float
  created_at DateTime @default(now()) @db.Timestamptz()
  updated_at DateTime @default(now()) @db.Timestamptz()

  budget    Budget @relation(fields: [budget_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  budget_id String @db.Uuid

  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category_id String   @db.Uuid

  @@map("budget_categories")
}
