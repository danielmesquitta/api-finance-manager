datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_DATABASE_URL")
  extensions = [unaccent, fuzzystrmatch]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model AccountBalance {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount     BigInt
  created_at DateTime  @default(now()) @db.Timestamptz()
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deleted_at DateTime? @db.Timestamptz()

  account    Account @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  account_id String  @db.Uuid

  @@map("account_balances")
}

model Account {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id String
  name        String
  type        String
  created_at  DateTime  @default(now()) @db.Timestamptz()
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deleted_at  DateTime? @db.Timestamptz()

  user_institution    UserInstitution @relation(fields: [user_institution_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_institution_id String          @db.Uuid

  transactions Transaction[]

  balances AccountBalance[]

  @@map("accounts")
}

model AIChatMessage {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message    String
  created_at DateTime  @default(now()) @db.Timestamptz()
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deleted_at DateTime? @db.Timestamptz()

  created_by_user    User?   @relation(fields: [created_by_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_by_user_id String? @db.Uuid

  ai_chat    AIChat @relation(fields: [ai_chat_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ai_chat_id String @db.Uuid

  @@map("ai_chat_messages")
}

model AIChat {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String?
  created_at DateTime  @default(now()) @db.Timestamptz()
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deleted_at DateTime? @db.Timestamptz()

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String @db.Uuid

  ai_chat_messages AIChatMessage[]

  @@map("ai_chats")
}

model BudgetCategory {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount     BigInt
  created_at DateTime  @default(now()) @db.Timestamptz()
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deleted_at DateTime? @db.Timestamptz()

  budget    Budget @relation(fields: [budget_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  budget_id String @db.Uuid

  category    TransactionCategory @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category_id String              @db.Uuid

  @@map("budget_categories")
}

model Budget {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount     BigInt
  date       DateTime  @db.Timestamptz()
  created_at DateTime  @default(now()) @db.Timestamptz()
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deleted_at DateTime? @db.Timestamptz()

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String @db.Uuid

  budget_categories BudgetCategory[]

  @@map("budgets")
}

model Feedback {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message    String
  created_at DateTime  @default(now()) @db.Timestamptz()
  deleted_at DateTime? @db.Timestamptz()

  user    User?   @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  user_id String? @db.Uuid

  @@map("feedbacks")
}

model Institution {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id String
  name        String
  logo        String?
  created_at  DateTime  @default(now()) @db.Timestamptz()
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deleted_at  DateTime? @db.Timestamptz()

  transactions Transaction[]

  user_institutions UserInstitution[]

  @@map("institutions")
}

model PaymentMethod {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id String
  name        String
  created_at  DateTime  @default(now()) @db.Timestamptz()
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deleted_at  DateTime? @db.Timestamptz()

  transactions Transaction[]

  @@map("payment_methods")
}

model TransactionCategory {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id String
  name        String
  created_at  DateTime  @default(now()) @db.Timestamptz()
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deleted_at  DateTime? @db.Timestamptz()

  transactions Transaction[]

  budget_categories BudgetCategory[]

  @@map("transaction_categories")
}

model Transaction {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id String?
  name        String
  amount      BigInt
  is_ignored  Boolean   @default(false)
  date        DateTime  @db.Timestamptz()
  created_at  DateTime  @default(now()) @db.Timestamptz()
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deleted_at  DateTime? @db.Timestamptz()

  payment_method_id String        @db.Uuid
  payment_method    PaymentMethod @relation(fields: [payment_method_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String @db.Uuid

  category    TransactionCategory @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category_id String              @db.Uuid

  account    Account? @relation(fields: [account_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  account_id String?  @db.Uuid

  institution    Institution? @relation(fields: [institution_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  institution_id String?      @db.Uuid

  @@map("transactions")
}

model UserAuthProvider {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id    String
  provider       String
  verified_email Boolean   @default(false)
  created_at     DateTime  @default(now()) @db.Timestamptz()
  updated_at     DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deleted_at     DateTime? @db.Timestamptz()

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String @db.Uuid

  @@map("user_auth_providers")
}

model UserInstitution {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id String
  created_at  DateTime  @default(now()) @db.Timestamptz()
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deleted_at  DateTime? @db.Timestamptz()

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String @db.Uuid

  institution    Institution @relation(fields: [institution_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  institution_id String      @db.Uuid

  accounts Account[]

  @@map("user_institutions")
}

model User {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String
  email                   String    @unique
  tier                    String
  avatar                  String?
  subscription_expires_at DateTime? @db.Timestamptz()
  synchronized_at         DateTime? @db.Timestamptz()
  created_at              DateTime  @default(now()) @db.Timestamptz()
  updated_at              DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deleted_at              DateTime? @db.Timestamptz()

  auth_providers UserAuthProvider[]

  budgets Budget[]

  transactions Transaction[]

  institutions UserInstitution[]

  feedbacks Feedback[]

  ai_chats AIChat[]

  ai_chat_messages AIChatMessage[]

  @@map("users")
}
