// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForCreateManyCategories implements pgx.CopyFromSource.
type iteratorForCreateManyCategories struct {
	rows                 []CreateManyCategoriesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateManyCategories) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateManyCategories) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ExternalID,
		r.rows[0].Name,
	}, nil
}

func (r iteratorForCreateManyCategories) Err() error {
	return nil
}

func (q *Queries) CreateManyCategories(ctx context.Context, arg []CreateManyCategoriesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"categories"}, []string{"external_id", "name"}, &iteratorForCreateManyCategories{rows: arg})
}

// iteratorForCreateManyInstitutions implements pgx.CopyFromSource.
type iteratorForCreateManyInstitutions struct {
	rows                 []CreateManyInstitutionsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateManyInstitutions) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateManyInstitutions) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ExternalID,
		r.rows[0].Name,
		r.rows[0].Logo,
	}, nil
}

func (r iteratorForCreateManyInstitutions) Err() error {
	return nil
}

func (q *Queries) CreateManyInstitutions(ctx context.Context, arg []CreateManyInstitutionsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"institutions"}, []string{"external_id", "name", "logo"}, &iteratorForCreateManyInstitutions{rows: arg})
}
