// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transaction_category.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

type CreateTransactionCategoriesParams struct {
	ExternalID string `json:"external_id"`
	Name       string `json:"name"`
}

const getDefaultTransactionCategory = `-- name: GetDefaultTransactionCategory :one
SELECT id, external_id, name, created_at, updated_at, deleted_at
FROM transaction_categories
WHERE external_id = '99999999'
  AND deleted_at IS NULL
`

func (q *Queries) GetDefaultTransactionCategory(ctx context.Context) (TransactionCategory, error) {
	row := q.db.QueryRow(ctx, getDefaultTransactionCategory)
	var i TransactionCategory
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTransactionCategoryByID = `-- name: GetTransactionCategoryByID :one
SELECT id, external_id, name, created_at, updated_at, deleted_at
FROM transaction_categories
WHERE id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetTransactionCategoryByID(ctx context.Context, id uuid.UUID) (TransactionCategory, error) {
	row := q.db.QueryRow(ctx, getTransactionCategoryByID, id)
	var i TransactionCategory
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
