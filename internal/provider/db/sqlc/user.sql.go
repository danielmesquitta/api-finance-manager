// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    auth_id,
    open_finance_id,
    provider,
    name,
    email,
    verified_email,
    tier,
    avatar,
    subscription_expires_at
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, provider, name, email, verified_email, tier, avatar, subscription_expires_at, synchronized_at, created_at, updated_at, deleted_at, auth_id, open_finance_id
`

type CreateUserParams struct {
	AuthID                string     `json:"auth_id"`
	OpenFinanceID         *string    `json:"open_finance_id"`
	Provider              string     `json:"provider"`
	Name                  string     `json:"name"`
	Email                 string     `json:"email"`
	VerifiedEmail         bool       `json:"verified_email"`
	Tier                  string     `json:"tier"`
	Avatar                *string    `json:"avatar"`
	SubscriptionExpiresAt *time.Time `json:"subscription_expires_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.AuthID,
		arg.OpenFinanceID,
		arg.Provider,
		arg.Name,
		arg.Email,
		arg.VerifiedEmail,
		arg.Tier,
		arg.Avatar,
		arg.SubscriptionExpiresAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.Name,
		&i.Email,
		&i.VerifiedEmail,
		&i.Tier,
		&i.Avatar,
		&i.SubscriptionExpiresAt,
		&i.SynchronizedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AuthID,
		&i.OpenFinanceID,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, provider, name, email, verified_email, tier, avatar, subscription_expires_at, synchronized_at, created_at, updated_at, deleted_at, auth_id, open_finance_id
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.Name,
		&i.Email,
		&i.VerifiedEmail,
		&i.Tier,
		&i.Avatar,
		&i.SubscriptionExpiresAt,
		&i.SynchronizedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AuthID,
		&i.OpenFinanceID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, provider, name, email, verified_email, tier, avatar, subscription_expires_at, synchronized_at, created_at, updated_at, deleted_at, auth_id, open_finance_id
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.Name,
		&i.Email,
		&i.VerifiedEmail,
		&i.Tier,
		&i.Avatar,
		&i.SubscriptionExpiresAt,
		&i.SynchronizedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AuthID,
		&i.OpenFinanceID,
	)
	return i, err
}

const listPremiumActiveUsersWithAccounts = `-- name: ListPremiumActiveUsersWithAccounts :many
SELECT users.id, users.provider, users.name, users.email, users.verified_email, users.tier, users.avatar, users.subscription_expires_at, users.synchronized_at, users.created_at, users.updated_at, users.deleted_at, users.auth_id, users.open_finance_id,
  accounts.id, accounts.external_id, accounts.name, accounts.type, accounts.created_at, accounts.updated_at, accounts.deleted_at, accounts.user_id, accounts.institution_id
FROM users
  JOIN accounts ON accounts.user_id = users.id
WHERE tier IN ('PREMIUM', 'TRIAL')
  AND subscription_expires_at > NOW()
  AND users.deleted_at IS NULL
  AND accounts.deleted_at IS NULL
`

type ListPremiumActiveUsersWithAccountsRow struct {
	User    User    `json:"user"`
	Account Account `json:"account"`
}

func (q *Queries) ListPremiumActiveUsersWithAccounts(ctx context.Context) ([]ListPremiumActiveUsersWithAccountsRow, error) {
	rows, err := q.db.Query(ctx, listPremiumActiveUsersWithAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPremiumActiveUsersWithAccountsRow
	for rows.Next() {
		var i ListPremiumActiveUsersWithAccountsRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.Provider,
			&i.User.Name,
			&i.User.Email,
			&i.User.VerifiedEmail,
			&i.User.Tier,
			&i.User.Avatar,
			&i.User.SubscriptionExpiresAt,
			&i.User.SynchronizedAt,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.User.DeletedAt,
			&i.User.AuthID,
			&i.User.OpenFinanceID,
			&i.Account.ID,
			&i.Account.ExternalID,
			&i.Account.Name,
			&i.Account.Type,
			&i.Account.CreatedAt,
			&i.Account.UpdatedAt,
			&i.Account.DeletedAt,
			&i.Account.UserID,
			&i.Account.InstitutionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, provider, name, email, verified_email, tier, avatar, subscription_expires_at, synchronized_at, created_at, updated_at, deleted_at, auth_id, open_finance_id
FROM users
WHERE deleted_at IS NULL
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Provider,
			&i.Name,
			&i.Email,
			&i.VerifiedEmail,
			&i.Tier,
			&i.Avatar,
			&i.SubscriptionExpiresAt,
			&i.SynchronizedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.AuthID,
			&i.OpenFinanceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET auth_id = $2,
  open_finance_id = $3,
  provider = $4,
  name = $5,
  email = $6,
  verified_email = $7,
  tier = $8,
  avatar = $9,
  subscription_expires_at = $10,
  synchronized_at = $11
WHERE id = $1
RETURNING id, provider, name, email, verified_email, tier, avatar, subscription_expires_at, synchronized_at, created_at, updated_at, deleted_at, auth_id, open_finance_id
`

type UpdateUserParams struct {
	ID                    uuid.UUID  `json:"id"`
	AuthID                string     `json:"auth_id"`
	OpenFinanceID         *string    `json:"open_finance_id"`
	Provider              string     `json:"provider"`
	Name                  string     `json:"name"`
	Email                 string     `json:"email"`
	VerifiedEmail         bool       `json:"verified_email"`
	Tier                  string     `json:"tier"`
	Avatar                *string    `json:"avatar"`
	SubscriptionExpiresAt *time.Time `json:"subscription_expires_at"`
	SynchronizedAt        *time.Time `json:"synchronized_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.AuthID,
		arg.OpenFinanceID,
		arg.Provider,
		arg.Name,
		arg.Email,
		arg.VerifiedEmail,
		arg.Tier,
		arg.Avatar,
		arg.SubscriptionExpiresAt,
		arg.SynchronizedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.Name,
		&i.Email,
		&i.VerifiedEmail,
		&i.Tier,
		&i.Avatar,
		&i.SubscriptionExpiresAt,
		&i.SynchronizedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AuthID,
		&i.OpenFinanceID,
	)
	return i, err
}
