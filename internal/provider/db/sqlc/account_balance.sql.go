// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account_balance.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

type CreateAccountBalancesParams struct {
	Amount    int64     `json:"amount"`
	UserID    uuid.UUID `json:"user_id"`
	AccountID uuid.UUID `json:"account_id"`
}

const getUserBalanceOnDate = `-- name: GetUserBalanceOnDate :one
WITH balances_on_date AS (
  SELECT DISTINCT ON (account_id) account_id,
    amount
  FROM account_balances
  WHERE user_id = $1
    AND created_at > $2::timestamptz
  ORDER BY account_id,
    created_at ASC
)
SELECT COALESCE(SUM(amount), 0)::bigint AS total_balance
FROM balances_on_date
`

type GetUserBalanceOnDateParams struct {
	UserID uuid.UUID `json:"user_id"`
	Date   time.Time `json:"date"`
}

func (q *Queries) GetUserBalanceOnDate(ctx context.Context, arg GetUserBalanceOnDateParams) (int64, error) {
	row := q.db.QueryRow(ctx, getUserBalanceOnDate, arg.UserID, arg.Date)
	var total_balance int64
	err := row.Scan(&total_balance)
	return total_balance, err
}
