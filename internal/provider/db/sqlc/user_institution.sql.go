// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_institution.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUserInstitution = `-- name: CreateUserInstitution :one
INSERT INTO user_institutions (external_id, user_id, institution_id)
VALUES ($1, $2, $3)
RETURNING id, external_id, created_at, deleted_at, user_id, institution_id
`

type CreateUserInstitutionParams struct {
	ExternalID    string    `json:"external_id"`
	UserID        uuid.UUID `json:"user_id"`
	InstitutionID uuid.UUID `json:"institution_id"`
}

func (q *Queries) CreateUserInstitution(ctx context.Context, arg CreateUserInstitutionParams) (UserInstitution, error) {
	row := q.db.QueryRow(ctx, createUserInstitution, arg.ExternalID, arg.UserID, arg.InstitutionID)
	var i UserInstitution
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.InstitutionID,
	)
	return i, err
}

const getUserInstitutionByExternalID = `-- name: GetUserInstitutionByExternalID :one
SELECT id, external_id, created_at, deleted_at, user_id, institution_id
FROM user_institutions
WHERE external_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetUserInstitutionByExternalID(ctx context.Context, externalID string) (UserInstitution, error) {
	row := q.db.QueryRow(ctx, getUserInstitutionByExternalID, externalID)
	var i UserInstitution
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.InstitutionID,
	)
	return i, err
}
