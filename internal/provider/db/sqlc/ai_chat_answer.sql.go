// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ai_chat_answer.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createAIChatAnswer = `-- name: CreateAIChatAnswer :one
INSERT INTO ai_chat_answers (message, ai_chat_message_id)
VALUES ($1, $2)
RETURNING id, message, rating, created_at, updated_at, deleted_at, ai_chat_message_id
`

type CreateAIChatAnswerParams struct {
	Message         string    `json:"message"`
	AiChatMessageID uuid.UUID `json:"ai_chat_message_id"`
}

func (q *Queries) CreateAIChatAnswer(ctx context.Context, arg CreateAIChatAnswerParams) (AiChatAnswer, error) {
	row := q.db.QueryRow(ctx, createAIChatAnswer, arg.Message, arg.AiChatMessageID)
	var i AiChatAnswer
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AiChatMessageID,
	)
	return i, err
}

const deleteAIChatAnswers = `-- name: DeleteAIChatAnswers :exec
UPDATE ai_chat_answers acmr
SET acmr.deleted_at = NOW()
FROM ai_chat_messages acm
WHERE acmr.ai_chat_message_id = acm.id
  AND acm.ai_chat_id = $1
`

func (q *Queries) DeleteAIChatAnswers(ctx context.Context, aiChatID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAIChatAnswers, aiChatID)
	return err
}

const updateAIChatAnswer = `-- name: UpdateAIChatAnswer :exec
UPDATE ai_chat_answers
SET rating = $2
WHERE id = $1
`

type UpdateAIChatAnswerParams struct {
	ID     uuid.UUID `json:"id"`
	Rating *string   `json:"rating"`
}

func (q *Queries) UpdateAIChatAnswer(ctx context.Context, arg UpdateAIChatAnswerParams) error {
	_, err := q.db.Exec(ctx, updateAIChatAnswer, arg.ID, arg.Rating)
	return err
}
