// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: budget.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budgets (amount, date, user_id)
VALUES ($1, $2, $3)
RETURNING id, amount, date, created_at, updated_at, deleted_at, user_id
`

type CreateBudgetParams struct {
	Amount int64     `json:"amount"`
	Date   time.Time `json:"date"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (Budget, error) {
	row := q.db.QueryRow(ctx, createBudget, arg.Amount, arg.Date, arg.UserID)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const deleteBudgets = `-- name: DeleteBudgets :exec
UPDATE budgets
SET deleted_at = NOW()
WHERE user_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) DeleteBudgets(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBudgets, userID)
	return err
}

const getBudget = `-- name: GetBudget :one
SELECT id, amount, date, created_at, updated_at, deleted_at, user_id
FROM budgets
WHERE user_id = $1
  AND date <= $2
  AND deleted_at IS NULL
ORDER BY date DESC
LIMIT 1
`

type GetBudgetParams struct {
	UserID uuid.UUID `json:"user_id"`
	Date   time.Time `json:"date"`
}

func (q *Queries) GetBudget(ctx context.Context, arg GetBudgetParams) (Budget, error) {
	row := q.db.QueryRow(ctx, getBudget, arg.UserID, arg.Date)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const updateBudget = `-- name: UpdateBudget :exec
UPDATE budgets
SET amount = $1
WHERE user_id = $2
  AND date = $3
  AND deleted_at IS NULL
`

type UpdateBudgetParams struct {
	Amount int64     `json:"amount"`
	UserID uuid.UUID `json:"user_id"`
	Date   time.Time `json:"date"`
}

func (q *Queries) UpdateBudget(ctx context.Context, arg UpdateBudgetParams) error {
	_, err := q.db.Exec(ctx, updateBudget, arg.Amount, arg.UserID, arg.Date)
	return err
}
