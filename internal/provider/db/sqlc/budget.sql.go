// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: budget.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budgets (amount, user_id)
VALUES ($1, $2)
RETURNING id, amount, created_at, updated_at, user_id
`

type CreateBudgetParams struct {
	Amount float64   `json:"amount"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (Budget, error) {
	row := q.db.QueryRow(ctx, createBudget, arg.Amount, arg.UserID)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

type CreateBudgetCategoriesParams struct {
	Amount     float64   `json:"amount"`
	BudgetID   uuid.UUID `json:"budget_id"`
	CategoryID uuid.UUID `json:"category_id"`
}

const deleteBudgetByID = `-- name: DeleteBudgetByID :exec
DELETE FROM budgets
WHERE id = $1
`

func (q *Queries) DeleteBudgetByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBudgetByID, id)
	return err
}

const deleteBudgetCategoriesByBudgetID = `-- name: DeleteBudgetCategoriesByBudgetID :exec
DELETE FROM budget_categories
WHERE budget_id = $1
`

func (q *Queries) DeleteBudgetCategoriesByBudgetID(ctx context.Context, budgetID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBudgetCategoriesByBudgetID, budgetID)
	return err
}

const getBudgetByUserID = `-- name: GetBudgetByUserID :one
SELECT id, amount, created_at, updated_at, user_id
FROM budgets
WHERE user_id = $1
`

func (q *Queries) GetBudgetByUserID(ctx context.Context, userID uuid.UUID) (Budget, error) {
	row := q.db.QueryRow(ctx, getBudgetByUserID, userID)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getBudgetWithCategoriesByUserID = `-- name: GetBudgetWithCategoriesByUserID :many
SELECT budgets.id, budgets.amount, budgets.created_at, budgets.updated_at, budgets.user_id,
  budget_categories.id, budget_categories.amount, budget_categories.created_at, budget_categories.updated_at, budget_categories.budget_id, budget_categories.category_id,
  categories.id, categories.external_id, categories.name, categories.created_at, categories.updated_at
FROM budgets
  JOIN budget_categories ON budgets.id = budget_categories.budget_id
  JOIN categories ON budget_categories.category_id = categories.id
WHERE user_id = $1
`

type GetBudgetWithCategoriesByUserIDRow struct {
	Budget         Budget         `json:"budget"`
	BudgetCategory BudgetCategory `json:"budget_category"`
	Category       Category       `json:"category"`
}

func (q *Queries) GetBudgetWithCategoriesByUserID(ctx context.Context, userID uuid.UUID) ([]GetBudgetWithCategoriesByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getBudgetWithCategoriesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBudgetWithCategoriesByUserIDRow
	for rows.Next() {
		var i GetBudgetWithCategoriesByUserIDRow
		if err := rows.Scan(
			&i.Budget.ID,
			&i.Budget.Amount,
			&i.Budget.CreatedAt,
			&i.Budget.UpdatedAt,
			&i.Budget.UserID,
			&i.BudgetCategory.ID,
			&i.BudgetCategory.Amount,
			&i.BudgetCategory.CreatedAt,
			&i.BudgetCategory.UpdatedAt,
			&i.BudgetCategory.BudgetID,
			&i.BudgetCategory.CategoryID,
			&i.Category.ID,
			&i.Category.ExternalID,
			&i.Category.Name,
			&i.Category.CreatedAt,
			&i.Category.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBudget = `-- name: UpdateBudget :exec
UPDATE budgets
SET amount = $1
WHERE user_id = $2
`

type UpdateBudgetParams struct {
	Amount float64   `json:"amount"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateBudget(ctx context.Context, arg UpdateBudgetParams) error {
	_, err := q.db.Exec(ctx, updateBudget, arg.Amount, arg.UserID)
	return err
}
