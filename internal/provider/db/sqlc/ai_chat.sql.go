// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ai_chat.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAIChat = `-- name: CreateAIChat :one
INSERT INTO ai_chats (user_id)
VALUES ($1)
RETURNING id, title, created_at, updated_at, deleted_at, user_id
`

func (q *Queries) CreateAIChat(ctx context.Context, userID uuid.UUID) (AiChat, error) {
	row := q.db.QueryRow(ctx, createAIChat, userID)
	var i AiChat
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const deleteAIChat = `-- name: DeleteAIChat :exec
UPDATE ai_chats
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteAIChat(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAIChat, id)
	return err
}

const getAIChat = `-- name: GetAIChat :one
SELECT id, title, created_at, updated_at, deleted_at, user_id
FROM ai_chats
WHERE id = $1
`

func (q *Queries) GetAIChat(ctx context.Context, id uuid.UUID) (AiChat, error) {
	row := q.db.QueryRow(ctx, getAIChat, id)
	var i AiChat
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const getLatestAIChatByUserID = `-- name: GetLatestAIChatByUserID :one
SELECT ai_chats.id, ai_chats.title, ai_chats.created_at, ai_chats.updated_at, ai_chats.deleted_at, ai_chats.user_id,
  EXISTS (
    SELECT 1
    FROM ai_chat_messages
    WHERE ai_chat_messages.ai_chat_id = ai_chats.id
      AND ai_chat_messages.deleted_at IS NULL
    LIMIT 1
  ) AS has_messages
FROM ai_chats
WHERE ai_chats.deleted_at IS NULL
  AND ai_chats.user_id = $1
ORDER BY ai_chats.created_at DESC
LIMIT 1
`

type GetLatestAIChatByUserIDRow struct {
	ID          uuid.UUID  `json:"id"`
	Title       *string    `json:"title"`
	CreatedAt   time.Time  `json:"created_at"`
	UpdatedAt   time.Time  `json:"updated_at"`
	DeletedAt   *time.Time `json:"deleted_at"`
	UserID      uuid.UUID  `json:"user_id"`
	HasMessages bool       `json:"has_messages"`
}

func (q *Queries) GetLatestAIChatByUserID(ctx context.Context, userID uuid.UUID) (GetLatestAIChatByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getLatestAIChatByUserID, userID)
	var i GetLatestAIChatByUserIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.HasMessages,
	)
	return i, err
}

const updateAIChat = `-- name: UpdateAIChat :exec
UPDATE ai_chats
SET title = $2
WHERE id = $1
`

type UpdateAIChatParams struct {
	ID    uuid.UUID `json:"id"`
	Title *string   `json:"title"`
}

func (q *Queries) UpdateAIChat(ctx context.Context, arg UpdateAIChatParams) error {
	_, err := q.db.Exec(ctx, updateAIChat, arg.ID, arg.Title)
	return err
}
