// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ai_chat.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countAIChatMessagesAndAnswers = `-- name: CountAIChatMessagesAndAnswers :one
SELECT (
    SELECT COUNT(*)
    FROM ai_chat_messages m
    WHERE m.ai_chat_id = $1
      AND m.deleted_at IS NULL
  ) + (
    SELECT COUNT(*)
    FROM ai_chat_answers r
      JOIN ai_chat_messages m ON m.id = r.ai_chat_message_id
    WHERE m.ai_chat_id = $1
      AND m.deleted_at IS NULL
      AND r.deleted_at IS NULL
  ) AS total_count
`

func (q *Queries) CountAIChatMessagesAndAnswers(ctx context.Context, aiChatID uuid.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, countAIChatMessagesAndAnswers, aiChatID)
	var total_count int32
	err := row.Scan(&total_count)
	return total_count, err
}

const createAIChat = `-- name: CreateAIChat :one
INSERT INTO ai_chats (user_id)
VALUES ($1)
RETURNING id, title, created_at, updated_at, deleted_at, user_id
`

func (q *Queries) CreateAIChat(ctx context.Context, userID uuid.UUID) (AiChat, error) {
	row := q.db.QueryRow(ctx, createAIChat, userID)
	var i AiChat
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const deleteAIChat = `-- name: DeleteAIChat :exec
UPDATE ai_chats
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteAIChat(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAIChat, id)
	return err
}

const getAIChat = `-- name: GetAIChat :one
SELECT id, title, created_at, updated_at, deleted_at, user_id
FROM ai_chats
WHERE id = $1
`

func (q *Queries) GetAIChat(ctx context.Context, id uuid.UUID) (AiChat, error) {
	row := q.db.QueryRow(ctx, getAIChat, id)
	var i AiChat
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const getLatestAIChatByUserID = `-- name: GetLatestAIChatByUserID :one
SELECT ai_chats.id, ai_chats.title, ai_chats.created_at, ai_chats.updated_at, ai_chats.deleted_at, ai_chats.user_id,
  EXISTS (
    SELECT 1
    FROM ai_chat_messages
    WHERE ai_chat_messages.ai_chat_id = ai_chats.id
      AND ai_chat_messages.deleted_at IS NULL
    LIMIT 1
  ) AS has_messages
FROM ai_chats
WHERE ai_chats.deleted_at IS NULL
  AND ai_chats.user_id = $1
ORDER BY ai_chats.created_at DESC
LIMIT 1
`

type GetLatestAIChatByUserIDRow struct {
	ID          uuid.UUID  `json:"id"`
	Title       *string    `json:"title"`
	CreatedAt   time.Time  `json:"created_at"`
	UpdatedAt   time.Time  `json:"updated_at"`
	DeletedAt   *time.Time `json:"deleted_at"`
	UserID      uuid.UUID  `json:"user_id"`
	HasMessages bool       `json:"has_messages"`
}

func (q *Queries) GetLatestAIChatByUserID(ctx context.Context, userID uuid.UUID) (GetLatestAIChatByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getLatestAIChatByUserID, userID)
	var i GetLatestAIChatByUserIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.HasMessages,
	)
	return i, err
}

const listAIChatMessagesAndAnswers = `-- name: ListAIChatMessagesAndAnswers :many
WITH combined_messages AS (
  SELECT m.id,
    m.message,
    NULL as rating,
    'USER' as author,
    m.created_at
  FROM ai_chat_messages m
  WHERE m.ai_chat_id = $1
    AND m.deleted_at IS NULL
  UNION ALL
  SELECT r.id,
    r.message,
    r.rating,
    'AI' as author,
    r.created_at
  FROM ai_chat_answers r
    JOIN ai_chat_messages m ON m.id = r.ai_chat_message_id
  WHERE m.ai_chat_id = $1
    AND m.deleted_at IS NULL
    AND r.deleted_at IS NULL
)
SELECT id, message, rating, author, created_at
FROM combined_messages
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListAIChatMessagesAndAnswersParams struct {
	AiChatID uuid.UUID `json:"ai_chat_id"`
	Limit    int32     `json:"limit"`
	Offset   int32     `json:"offset"`
}

type ListAIChatMessagesAndAnswersRow struct {
	ID        uuid.UUID   `json:"id"`
	Message   string      `json:"message"`
	Rating    interface{} `json:"rating"`
	Author    string      `json:"author"`
	CreatedAt time.Time   `json:"created_at"`
}

func (q *Queries) ListAIChatMessagesAndAnswers(ctx context.Context, arg ListAIChatMessagesAndAnswersParams) ([]ListAIChatMessagesAndAnswersRow, error) {
	rows, err := q.db.Query(ctx, listAIChatMessagesAndAnswers, arg.AiChatID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAIChatMessagesAndAnswersRow
	for rows.Next() {
		var i ListAIChatMessagesAndAnswersRow
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.Rating,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAIChat = `-- name: UpdateAIChat :exec
UPDATE ai_chats
SET title = $2
WHERE id = $1
`

type UpdateAIChatParams struct {
	ID    uuid.UUID `json:"id"`
	Title *string   `json:"title"`
}

func (q *Queries) UpdateAIChat(ctx context.Context, arg UpdateAIChatParams) error {
	_, err := q.db.Exec(ctx, updateAIChat, arg.ID, arg.Title)
	return err
}
