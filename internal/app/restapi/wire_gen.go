// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package restapi

import (
	"github.com/danielmesquitta/api-finance-manager/internal/app/restapi/handler"
	"github.com/danielmesquitta/api-finance-manager/internal/app/restapi/middleware"
	"github.com/danielmesquitta/api-finance-manager/internal/app/restapi/router"
	"github.com/danielmesquitta/api-finance-manager/internal/config"
	"github.com/danielmesquitta/api-finance-manager/internal/domain/usecase"
	"github.com/danielmesquitta/api-finance-manager/internal/pkg/hash"
	"github.com/danielmesquitta/api-finance-manager/internal/pkg/jwtutil"
	"github.com/danielmesquitta/api-finance-manager/internal/pkg/tx"
	"github.com/danielmesquitta/api-finance-manager/internal/pkg/validator"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/cache/rediscache"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/db"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/db/query"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/oauth/googleoauth"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/oauth/mockoauth"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/openfinance/mockpluggy"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/openfinance/pluggy"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/repo/pgrepo"
	"testing"
)

// Injectors from wire_config_gen.go:

// NewDev wires up the application in dev mode.
func NewDev(v *validator.Validator, e *config.Env, t *testing.T) *App {
	jwt := jwtutil.NewJWT(e)
	middlewareMiddleware := middleware.NewMiddleware(e, jwt)
	healthHandler := handler.NewHealthHandler()
	docHandler := handler.NewDocHandler()
	hasher := hash.NewHasher(e)
	pool := db.NewPGXPool(e)
	queryBuilder := query.NewQueryBuilder(e, pool)
	dbDB := db.NewDB(pool, queryBuilder)
	userRepo := pgrepo.NewUserRepo(dbDB)
	googleOAuth := googleoauth.NewGoogleOAuth()
	mockOAuth := mockoauth.NewMockOAuth(e)
	signIn := usecase.NewSignIn(v, hasher, userRepo, jwt, googleOAuth, mockOAuth)
	refreshToken := usecase.NewRefreshToken(signIn)
	authHandler := handler.NewAuthHandler(signIn, refreshToken)
	calculateCompoundInterest := usecase.NewCalculateCompoundInterest(v)
	calculateEmergencyReserve := usecase.NewCalculateEmergencyReserve(v)
	calculateRetirement := usecase.NewCalculateRetirement(v, calculateCompoundInterest)
	calculateSimpleInterest := usecase.NewCalculateSimpleInterest(v)
	calculateCashVsInstallments := usecase.NewCalculateCashVsInstallments(v, calculateCompoundInterest)
	calculatorHandler := handler.NewCalculatorHandler(calculateCompoundInterest, calculateEmergencyReserve, calculateRetirement, calculateSimpleInterest, calculateCashVsInstallments)
	client := pluggy.NewClient(e, jwt)
	mockpluggyClient := mockpluggy.NewClient(client)
	institutionRepo := pgrepo.NewInstitutionRepo(dbDB, queryBuilder)
	syncInstitutions := usecase.NewSyncInstitutions(mockpluggyClient, institutionRepo)
	listInstitutions := usecase.NewListInstitutions(institutionRepo)
	institutionHandler := handler.NewInstitutionHandler(syncInstitutions, listInstitutions)
	transactionCategoryRepo := pgrepo.NewCategoryRepo(dbDB, queryBuilder)
	syncCategories := usecase.NewSyncCategories(mockpluggyClient, transactionCategoryRepo)
	listTransactionCategories := usecase.NewListTransactionCategories(transactionCategoryRepo)
	categoryHandler := handler.NewCategoryHandler(syncCategories, listTransactionCategories)
	pgxTX := tx.NewPgxTX(pool)
	budgetRepo := pgrepo.NewBudgetRepo(dbDB)
	upsertBudget := usecase.NewUpsertBudget(v, pgxTX, budgetRepo, transactionCategoryRepo)
	transactionRepo := pgrepo.NewTransactionRepo(dbDB, queryBuilder)
	getBudget := usecase.NewGetBudget(v, budgetRepo, transactionRepo)
	getBudgetCategory := usecase.NewGetBudgetCategory(v, budgetRepo, transactionRepo, transactionCategoryRepo)
	deleteBudget := usecase.NewDeleteBudget(pgxTX, budgetRepo)
	listTransactions := usecase.NewListTransactions(v, transactionRepo)
	listBudgetCategoryTransactions := usecase.NewListBudgetCategoryTransactions(v, listTransactions)
	budgetHandler := handler.NewBudgetHandler(upsertBudget, getBudget, getBudgetCategory, deleteBudget, listBudgetCategoryTransactions)
	getUser := usecase.NewGetUser(userRepo)
	updateUser := usecase.NewUpdateUser(v, userRepo)
	deleteUser := usecase.NewDeleteUser(hasher, userRepo)
	userHandler := handler.NewUserHandler(getUser, updateUser, deleteUser)
	accountRepo := pgrepo.NewAccountRepo(dbDB, queryBuilder)
	accountBalanceRepo := pgrepo.NewAccountBalanceRepo(dbDB)
	createAccounts := usecase.NewCreateAccounts(v, mockpluggyClient, pgxTX, userRepo, accountRepo, accountBalanceRepo, institutionRepo)
	accountHandler := handler.NewAccountHandler(createAccounts)
	redisCache := rediscache.NewRedisCache(e)
	paymentMethodRepo := pgrepo.NewPaymentMethodRepo(dbDB, queryBuilder)
	syncTransactions := usecase.NewSyncTransactions(e, mockpluggyClient, redisCache, pgxTX, accountRepo, userRepo, transactionRepo, transactionCategoryRepo, paymentMethodRepo)
	getTransaction := usecase.NewGetTransaction(transactionRepo)
	updateTransaction := usecase.NewUpdateTransaction(v, transactionRepo)
	createTransaction := usecase.NewCreateTransaction(v, transactionRepo, userRepo, transactionCategoryRepo, paymentMethodRepo)
	transactionHandler := handler.NewTransactionHandler(syncTransactions, listTransactions, getTransaction, updateTransaction, createTransaction)
	getBalance := usecase.NewGetBalance(v, transactionRepo, accountBalanceRepo)
	syncBalances := usecase.NewSyncBalances(e, mockpluggyClient, redisCache, accountRepo, accountBalanceRepo)
	balanceHandler := handler.NewBalanceHandler(getBalance, syncBalances)
	feedbackRepo := pgrepo.NewFeedbackRepo(dbDB)
	createFeedback := usecase.NewCreateFeedback(v, feedbackRepo)
	feedbackHandler := handler.NewFeedbackHandler(createFeedback)
	listPaymentMethods := usecase.NewListPaymentMethods(paymentMethodRepo)
	paymentMethodHandler := handler.NewPaymentMethodHandler(listPaymentMethods)
	aiChatRepo := pgrepo.NewAIChatRepo(dbDB, queryBuilder)
	createAIChat := usecase.NewCreateAIChat(aiChatRepo)
	deleteAIChat := usecase.NewDeleteAIChat(aiChatRepo)
	updateAIChat := usecase.NewUpdateAIChat(v, aiChatRepo)
	listAIChats := usecase.NewListAIChats(aiChatRepo)
	aiChatHandler := handler.NewAIChatHandler(createAIChat, deleteAIChat, updateAIChat, listAIChats)
	aiChatMessageRepo := pgrepo.NewAIChatMessageRepo(dbDB, queryBuilder)
	listAIChatMessages := usecase.NewListAIChatMessages(aiChatMessageRepo)
	aiChatMessageHandler := handler.NewAIChatMessageHandler(listAIChatMessages)
	routerRouter := router.NewRouter(e, middlewareMiddleware, healthHandler, docHandler, authHandler, calculatorHandler, institutionHandler, categoryHandler, budgetHandler, userHandler, accountHandler, transactionHandler, balanceHandler, feedbackHandler, paymentMethodHandler, aiChatHandler, aiChatMessageHandler)
	app := newApp(middlewareMiddleware, routerRouter, redisCache, dbDB)
	return app
}

// NewStaging wires up the application in staging mode.
func NewStaging(v *validator.Validator, e *config.Env, t *testing.T) *App {
	jwt := jwtutil.NewJWT(e)
	middlewareMiddleware := middleware.NewMiddleware(e, jwt)
	healthHandler := handler.NewHealthHandler()
	docHandler := handler.NewDocHandler()
	hasher := hash.NewHasher(e)
	pool := db.NewPGXPool(e)
	queryBuilder := query.NewQueryBuilder(e, pool)
	dbDB := db.NewDB(pool, queryBuilder)
	userRepo := pgrepo.NewUserRepo(dbDB)
	googleOAuth := googleoauth.NewGoogleOAuth()
	mockOAuth := mockoauth.NewMockOAuth(e)
	signIn := usecase.NewSignIn(v, hasher, userRepo, jwt, googleOAuth, mockOAuth)
	refreshToken := usecase.NewRefreshToken(signIn)
	authHandler := handler.NewAuthHandler(signIn, refreshToken)
	calculateCompoundInterest := usecase.NewCalculateCompoundInterest(v)
	calculateEmergencyReserve := usecase.NewCalculateEmergencyReserve(v)
	calculateRetirement := usecase.NewCalculateRetirement(v, calculateCompoundInterest)
	calculateSimpleInterest := usecase.NewCalculateSimpleInterest(v)
	calculateCashVsInstallments := usecase.NewCalculateCashVsInstallments(v, calculateCompoundInterest)
	calculatorHandler := handler.NewCalculatorHandler(calculateCompoundInterest, calculateEmergencyReserve, calculateRetirement, calculateSimpleInterest, calculateCashVsInstallments)
	client := pluggy.NewClient(e, jwt)
	mockpluggyClient := mockpluggy.NewClient(client)
	institutionRepo := pgrepo.NewInstitutionRepo(dbDB, queryBuilder)
	syncInstitutions := usecase.NewSyncInstitutions(mockpluggyClient, institutionRepo)
	listInstitutions := usecase.NewListInstitutions(institutionRepo)
	institutionHandler := handler.NewInstitutionHandler(syncInstitutions, listInstitutions)
	transactionCategoryRepo := pgrepo.NewCategoryRepo(dbDB, queryBuilder)
	syncCategories := usecase.NewSyncCategories(mockpluggyClient, transactionCategoryRepo)
	listTransactionCategories := usecase.NewListTransactionCategories(transactionCategoryRepo)
	categoryHandler := handler.NewCategoryHandler(syncCategories, listTransactionCategories)
	pgxTX := tx.NewPgxTX(pool)
	budgetRepo := pgrepo.NewBudgetRepo(dbDB)
	upsertBudget := usecase.NewUpsertBudget(v, pgxTX, budgetRepo, transactionCategoryRepo)
	transactionRepo := pgrepo.NewTransactionRepo(dbDB, queryBuilder)
	getBudget := usecase.NewGetBudget(v, budgetRepo, transactionRepo)
	getBudgetCategory := usecase.NewGetBudgetCategory(v, budgetRepo, transactionRepo, transactionCategoryRepo)
	deleteBudget := usecase.NewDeleteBudget(pgxTX, budgetRepo)
	listTransactions := usecase.NewListTransactions(v, transactionRepo)
	listBudgetCategoryTransactions := usecase.NewListBudgetCategoryTransactions(v, listTransactions)
	budgetHandler := handler.NewBudgetHandler(upsertBudget, getBudget, getBudgetCategory, deleteBudget, listBudgetCategoryTransactions)
	getUser := usecase.NewGetUser(userRepo)
	updateUser := usecase.NewUpdateUser(v, userRepo)
	deleteUser := usecase.NewDeleteUser(hasher, userRepo)
	userHandler := handler.NewUserHandler(getUser, updateUser, deleteUser)
	accountRepo := pgrepo.NewAccountRepo(dbDB, queryBuilder)
	accountBalanceRepo := pgrepo.NewAccountBalanceRepo(dbDB)
	createAccounts := usecase.NewCreateAccounts(v, mockpluggyClient, pgxTX, userRepo, accountRepo, accountBalanceRepo, institutionRepo)
	accountHandler := handler.NewAccountHandler(createAccounts)
	redisCache := rediscache.NewRedisCache(e)
	paymentMethodRepo := pgrepo.NewPaymentMethodRepo(dbDB, queryBuilder)
	syncTransactions := usecase.NewSyncTransactions(e, mockpluggyClient, redisCache, pgxTX, accountRepo, userRepo, transactionRepo, transactionCategoryRepo, paymentMethodRepo)
	getTransaction := usecase.NewGetTransaction(transactionRepo)
	updateTransaction := usecase.NewUpdateTransaction(v, transactionRepo)
	createTransaction := usecase.NewCreateTransaction(v, transactionRepo, userRepo, transactionCategoryRepo, paymentMethodRepo)
	transactionHandler := handler.NewTransactionHandler(syncTransactions, listTransactions, getTransaction, updateTransaction, createTransaction)
	getBalance := usecase.NewGetBalance(v, transactionRepo, accountBalanceRepo)
	syncBalances := usecase.NewSyncBalances(e, mockpluggyClient, redisCache, accountRepo, accountBalanceRepo)
	balanceHandler := handler.NewBalanceHandler(getBalance, syncBalances)
	feedbackRepo := pgrepo.NewFeedbackRepo(dbDB)
	createFeedback := usecase.NewCreateFeedback(v, feedbackRepo)
	feedbackHandler := handler.NewFeedbackHandler(createFeedback)
	listPaymentMethods := usecase.NewListPaymentMethods(paymentMethodRepo)
	paymentMethodHandler := handler.NewPaymentMethodHandler(listPaymentMethods)
	aiChatRepo := pgrepo.NewAIChatRepo(dbDB, queryBuilder)
	createAIChat := usecase.NewCreateAIChat(aiChatRepo)
	deleteAIChat := usecase.NewDeleteAIChat(aiChatRepo)
	updateAIChat := usecase.NewUpdateAIChat(v, aiChatRepo)
	listAIChats := usecase.NewListAIChats(aiChatRepo)
	aiChatHandler := handler.NewAIChatHandler(createAIChat, deleteAIChat, updateAIChat, listAIChats)
	aiChatMessageRepo := pgrepo.NewAIChatMessageRepo(dbDB, queryBuilder)
	listAIChatMessages := usecase.NewListAIChatMessages(aiChatMessageRepo)
	aiChatMessageHandler := handler.NewAIChatMessageHandler(listAIChatMessages)
	routerRouter := router.NewRouter(e, middlewareMiddleware, healthHandler, docHandler, authHandler, calculatorHandler, institutionHandler, categoryHandler, budgetHandler, userHandler, accountHandler, transactionHandler, balanceHandler, feedbackHandler, paymentMethodHandler, aiChatHandler, aiChatMessageHandler)
	app := newApp(middlewareMiddleware, routerRouter, redisCache, dbDB)
	return app
}

// NewTest wires up the application in test mode.
func NewTest(v *validator.Validator, e *config.Env, t *testing.T) *App {
	jwt := jwtutil.NewJWT(e)
	middlewareMiddleware := middleware.NewMiddleware(e, jwt)
	healthHandler := handler.NewHealthHandler()
	docHandler := handler.NewDocHandler()
	hasher := hash.NewHasher(e)
	pool := db.NewPGXPool(e)
	queryBuilder := query.NewQueryBuilder(e, pool)
	dbDB := db.NewDB(pool, queryBuilder)
	userRepo := pgrepo.NewUserRepo(dbDB)
	googleOAuth := googleoauth.NewGoogleOAuth()
	mockOAuth := mockoauth.NewMockOAuth(e)
	signIn := usecase.NewSignIn(v, hasher, userRepo, jwt, googleOAuth, mockOAuth)
	refreshToken := usecase.NewRefreshToken(signIn)
	authHandler := handler.NewAuthHandler(signIn, refreshToken)
	calculateCompoundInterest := usecase.NewCalculateCompoundInterest(v)
	calculateEmergencyReserve := usecase.NewCalculateEmergencyReserve(v)
	calculateRetirement := usecase.NewCalculateRetirement(v, calculateCompoundInterest)
	calculateSimpleInterest := usecase.NewCalculateSimpleInterest(v)
	calculateCashVsInstallments := usecase.NewCalculateCashVsInstallments(v, calculateCompoundInterest)
	calculatorHandler := handler.NewCalculatorHandler(calculateCompoundInterest, calculateEmergencyReserve, calculateRetirement, calculateSimpleInterest, calculateCashVsInstallments)
	client := pluggy.NewClient(e, jwt)
	mockpluggyClient := mockpluggy.NewClient(client)
	institutionRepo := pgrepo.NewInstitutionRepo(dbDB, queryBuilder)
	syncInstitutions := usecase.NewSyncInstitutions(mockpluggyClient, institutionRepo)
	listInstitutions := usecase.NewListInstitutions(institutionRepo)
	institutionHandler := handler.NewInstitutionHandler(syncInstitutions, listInstitutions)
	transactionCategoryRepo := pgrepo.NewCategoryRepo(dbDB, queryBuilder)
	syncCategories := usecase.NewSyncCategories(mockpluggyClient, transactionCategoryRepo)
	listTransactionCategories := usecase.NewListTransactionCategories(transactionCategoryRepo)
	categoryHandler := handler.NewCategoryHandler(syncCategories, listTransactionCategories)
	pgxTX := tx.NewPgxTX(pool)
	budgetRepo := pgrepo.NewBudgetRepo(dbDB)
	upsertBudget := usecase.NewUpsertBudget(v, pgxTX, budgetRepo, transactionCategoryRepo)
	transactionRepo := pgrepo.NewTransactionRepo(dbDB, queryBuilder)
	getBudget := usecase.NewGetBudget(v, budgetRepo, transactionRepo)
	getBudgetCategory := usecase.NewGetBudgetCategory(v, budgetRepo, transactionRepo, transactionCategoryRepo)
	deleteBudget := usecase.NewDeleteBudget(pgxTX, budgetRepo)
	listTransactions := usecase.NewListTransactions(v, transactionRepo)
	listBudgetCategoryTransactions := usecase.NewListBudgetCategoryTransactions(v, listTransactions)
	budgetHandler := handler.NewBudgetHandler(upsertBudget, getBudget, getBudgetCategory, deleteBudget, listBudgetCategoryTransactions)
	getUser := usecase.NewGetUser(userRepo)
	updateUser := usecase.NewUpdateUser(v, userRepo)
	deleteUser := usecase.NewDeleteUser(hasher, userRepo)
	userHandler := handler.NewUserHandler(getUser, updateUser, deleteUser)
	accountRepo := pgrepo.NewAccountRepo(dbDB, queryBuilder)
	accountBalanceRepo := pgrepo.NewAccountBalanceRepo(dbDB)
	createAccounts := usecase.NewCreateAccounts(v, mockpluggyClient, pgxTX, userRepo, accountRepo, accountBalanceRepo, institutionRepo)
	accountHandler := handler.NewAccountHandler(createAccounts)
	redisCache := rediscache.NewRedisCache(e)
	paymentMethodRepo := pgrepo.NewPaymentMethodRepo(dbDB, queryBuilder)
	syncTransactions := usecase.NewSyncTransactions(e, mockpluggyClient, redisCache, pgxTX, accountRepo, userRepo, transactionRepo, transactionCategoryRepo, paymentMethodRepo)
	getTransaction := usecase.NewGetTransaction(transactionRepo)
	updateTransaction := usecase.NewUpdateTransaction(v, transactionRepo)
	createTransaction := usecase.NewCreateTransaction(v, transactionRepo, userRepo, transactionCategoryRepo, paymentMethodRepo)
	transactionHandler := handler.NewTransactionHandler(syncTransactions, listTransactions, getTransaction, updateTransaction, createTransaction)
	getBalance := usecase.NewGetBalance(v, transactionRepo, accountBalanceRepo)
	syncBalances := usecase.NewSyncBalances(e, mockpluggyClient, redisCache, accountRepo, accountBalanceRepo)
	balanceHandler := handler.NewBalanceHandler(getBalance, syncBalances)
	feedbackRepo := pgrepo.NewFeedbackRepo(dbDB)
	createFeedback := usecase.NewCreateFeedback(v, feedbackRepo)
	feedbackHandler := handler.NewFeedbackHandler(createFeedback)
	listPaymentMethods := usecase.NewListPaymentMethods(paymentMethodRepo)
	paymentMethodHandler := handler.NewPaymentMethodHandler(listPaymentMethods)
	aiChatRepo := pgrepo.NewAIChatRepo(dbDB, queryBuilder)
	createAIChat := usecase.NewCreateAIChat(aiChatRepo)
	deleteAIChat := usecase.NewDeleteAIChat(aiChatRepo)
	updateAIChat := usecase.NewUpdateAIChat(v, aiChatRepo)
	listAIChats := usecase.NewListAIChats(aiChatRepo)
	aiChatHandler := handler.NewAIChatHandler(createAIChat, deleteAIChat, updateAIChat, listAIChats)
	aiChatMessageRepo := pgrepo.NewAIChatMessageRepo(dbDB, queryBuilder)
	listAIChatMessages := usecase.NewListAIChatMessages(aiChatMessageRepo)
	aiChatMessageHandler := handler.NewAIChatMessageHandler(listAIChatMessages)
	routerRouter := router.NewRouter(e, middlewareMiddleware, healthHandler, docHandler, authHandler, calculatorHandler, institutionHandler, categoryHandler, budgetHandler, userHandler, accountHandler, transactionHandler, balanceHandler, feedbackHandler, paymentMethodHandler, aiChatHandler, aiChatMessageHandler)
	app := newApp(middlewareMiddleware, routerRouter, redisCache, dbDB)
	return app
}

// NewProd wires up the application in prod mode.
func NewProd(v *validator.Validator, e *config.Env, t *testing.T) *App {
	jwt := jwtutil.NewJWT(e)
	middlewareMiddleware := middleware.NewMiddleware(e, jwt)
	healthHandler := handler.NewHealthHandler()
	docHandler := handler.NewDocHandler()
	hasher := hash.NewHasher(e)
	pool := db.NewPGXPool(e)
	queryBuilder := query.NewQueryBuilder(e, pool)
	dbDB := db.NewDB(pool, queryBuilder)
	userRepo := pgrepo.NewUserRepo(dbDB)
	googleOAuth := googleoauth.NewGoogleOAuth()
	mockOAuth := _wireMockOAuthValue
	signIn := usecase.NewSignIn(v, hasher, userRepo, jwt, googleOAuth, mockOAuth)
	refreshToken := usecase.NewRefreshToken(signIn)
	authHandler := handler.NewAuthHandler(signIn, refreshToken)
	calculateCompoundInterest := usecase.NewCalculateCompoundInterest(v)
	calculateEmergencyReserve := usecase.NewCalculateEmergencyReserve(v)
	calculateRetirement := usecase.NewCalculateRetirement(v, calculateCompoundInterest)
	calculateSimpleInterest := usecase.NewCalculateSimpleInterest(v)
	calculateCashVsInstallments := usecase.NewCalculateCashVsInstallments(v, calculateCompoundInterest)
	calculatorHandler := handler.NewCalculatorHandler(calculateCompoundInterest, calculateEmergencyReserve, calculateRetirement, calculateSimpleInterest, calculateCashVsInstallments)
	client := pluggy.NewClient(e, jwt)
	institutionRepo := pgrepo.NewInstitutionRepo(dbDB, queryBuilder)
	syncInstitutions := usecase.NewSyncInstitutions(client, institutionRepo)
	listInstitutions := usecase.NewListInstitutions(institutionRepo)
	institutionHandler := handler.NewInstitutionHandler(syncInstitutions, listInstitutions)
	transactionCategoryRepo := pgrepo.NewCategoryRepo(dbDB, queryBuilder)
	syncCategories := usecase.NewSyncCategories(client, transactionCategoryRepo)
	listTransactionCategories := usecase.NewListTransactionCategories(transactionCategoryRepo)
	categoryHandler := handler.NewCategoryHandler(syncCategories, listTransactionCategories)
	pgxTX := tx.NewPgxTX(pool)
	budgetRepo := pgrepo.NewBudgetRepo(dbDB)
	upsertBudget := usecase.NewUpsertBudget(v, pgxTX, budgetRepo, transactionCategoryRepo)
	transactionRepo := pgrepo.NewTransactionRepo(dbDB, queryBuilder)
	getBudget := usecase.NewGetBudget(v, budgetRepo, transactionRepo)
	getBudgetCategory := usecase.NewGetBudgetCategory(v, budgetRepo, transactionRepo, transactionCategoryRepo)
	deleteBudget := usecase.NewDeleteBudget(pgxTX, budgetRepo)
	listTransactions := usecase.NewListTransactions(v, transactionRepo)
	listBudgetCategoryTransactions := usecase.NewListBudgetCategoryTransactions(v, listTransactions)
	budgetHandler := handler.NewBudgetHandler(upsertBudget, getBudget, getBudgetCategory, deleteBudget, listBudgetCategoryTransactions)
	getUser := usecase.NewGetUser(userRepo)
	updateUser := usecase.NewUpdateUser(v, userRepo)
	deleteUser := usecase.NewDeleteUser(hasher, userRepo)
	userHandler := handler.NewUserHandler(getUser, updateUser, deleteUser)
	accountRepo := pgrepo.NewAccountRepo(dbDB, queryBuilder)
	accountBalanceRepo := pgrepo.NewAccountBalanceRepo(dbDB)
	createAccounts := usecase.NewCreateAccounts(v, client, pgxTX, userRepo, accountRepo, accountBalanceRepo, institutionRepo)
	accountHandler := handler.NewAccountHandler(createAccounts)
	redisCache := rediscache.NewRedisCache(e)
	paymentMethodRepo := pgrepo.NewPaymentMethodRepo(dbDB, queryBuilder)
	syncTransactions := usecase.NewSyncTransactions(e, client, redisCache, pgxTX, accountRepo, userRepo, transactionRepo, transactionCategoryRepo, paymentMethodRepo)
	getTransaction := usecase.NewGetTransaction(transactionRepo)
	updateTransaction := usecase.NewUpdateTransaction(v, transactionRepo)
	createTransaction := usecase.NewCreateTransaction(v, transactionRepo, userRepo, transactionCategoryRepo, paymentMethodRepo)
	transactionHandler := handler.NewTransactionHandler(syncTransactions, listTransactions, getTransaction, updateTransaction, createTransaction)
	getBalance := usecase.NewGetBalance(v, transactionRepo, accountBalanceRepo)
	syncBalances := usecase.NewSyncBalances(e, client, redisCache, accountRepo, accountBalanceRepo)
	balanceHandler := handler.NewBalanceHandler(getBalance, syncBalances)
	feedbackRepo := pgrepo.NewFeedbackRepo(dbDB)
	createFeedback := usecase.NewCreateFeedback(v, feedbackRepo)
	feedbackHandler := handler.NewFeedbackHandler(createFeedback)
	listPaymentMethods := usecase.NewListPaymentMethods(paymentMethodRepo)
	paymentMethodHandler := handler.NewPaymentMethodHandler(listPaymentMethods)
	aiChatRepo := pgrepo.NewAIChatRepo(dbDB, queryBuilder)
	createAIChat := usecase.NewCreateAIChat(aiChatRepo)
	deleteAIChat := usecase.NewDeleteAIChat(aiChatRepo)
	updateAIChat := usecase.NewUpdateAIChat(v, aiChatRepo)
	listAIChats := usecase.NewListAIChats(aiChatRepo)
	aiChatHandler := handler.NewAIChatHandler(createAIChat, deleteAIChat, updateAIChat, listAIChats)
	aiChatMessageRepo := pgrepo.NewAIChatMessageRepo(dbDB, queryBuilder)
	listAIChatMessages := usecase.NewListAIChatMessages(aiChatMessageRepo)
	aiChatMessageHandler := handler.NewAIChatMessageHandler(listAIChatMessages)
	routerRouter := router.NewRouter(e, middlewareMiddleware, healthHandler, docHandler, authHandler, calculatorHandler, institutionHandler, categoryHandler, budgetHandler, userHandler, accountHandler, transactionHandler, balanceHandler, feedbackHandler, paymentMethodHandler, aiChatHandler, aiChatMessageHandler)
	app := newApp(middlewareMiddleware, routerRouter, redisCache, dbDB)
	return app
}

var (
	_wireMockOAuthValue = (*mockoauth.MockOAuth)(nil)
)
