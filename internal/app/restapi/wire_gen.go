// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package restapi

import (
	"github.com/danielmesquitta/api-finance-manager/internal/app/restapi/handler"
	"github.com/danielmesquitta/api-finance-manager/internal/app/restapi/middleware"
	"github.com/danielmesquitta/api-finance-manager/internal/app/restapi/router"
	"github.com/danielmesquitta/api-finance-manager/internal/config"
	"github.com/danielmesquitta/api-finance-manager/internal/domain/usecase"
	"github.com/danielmesquitta/api-finance-manager/internal/pkg/jwtutil"
	"github.com/danielmesquitta/api-finance-manager/internal/pkg/tx"
	"github.com/danielmesquitta/api-finance-manager/internal/pkg/validator"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/db"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/db/query"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/oauth/googleoauth"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/oauth/mockoauth"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/openfinance/mockpluggy"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/openfinance/pluggy"
	"github.com/danielmesquitta/api-finance-manager/internal/provider/repo/pgrepo"
)

// Injectors from wire.go:

func New() *App {
	validatorValidator := validator.NewValidator()
	env := config.LoadEnv(validatorValidator)
	jwt := jwtutil.NewJWT(env)
	middlewareMiddleware := middleware.NewMiddleware(env, jwt)
	healthHandler := handler.NewHealthHandler()
	pool := db.NewPGXPool(env)
	dbDB := db.NewQueries(pool)
	userPgRepo := pgrepo.NewUserPgRepo(dbDB)
	googleOAuth := googleoauth.NewGoogleOAuth()
	mockOAuth := mockoauth.NewMockOAuth(env)
	signIn := usecase.NewSignIn(validatorValidator, userPgRepo, jwt, googleOAuth, mockOAuth)
	refreshToken := usecase.NewRefreshToken(signIn)
	authHandler := handler.NewAuthHandler(signIn, refreshToken)
	calculateCompoundInterest := usecase.NewCalculateCompoundInterest(validatorValidator)
	calculateEmergencyReserve := usecase.NewCalculateEmergencyReserve(validatorValidator)
	calculateRetirement := usecase.NewCalculateRetirement(validatorValidator, calculateCompoundInterest)
	calculateSimpleInterest := usecase.NewCalculateSimpleInterest(validatorValidator)
	calculatorHandler := handler.NewCalculatorHandler(calculateCompoundInterest, calculateEmergencyReserve, calculateRetirement, calculateSimpleInterest)
	client := pluggy.NewClient(env, jwt)
	mockpluggyClient := mockpluggy.NewClient(client)
	institutionPgRepo := pgrepo.NewInstitutionPgRepo(dbDB)
	syncInstitutions := usecase.NewSyncInstitutions(mockpluggyClient, institutionPgRepo)
	institutionHandler := handler.NewInstitutionHandler(syncInstitutions)
	queryBuilder := query.NewQueryBuilder(env, dbDB)
	categoryPgRepo := pgrepo.NewCategoryPgRepo(dbDB, queryBuilder)
	syncCategories := usecase.NewSyncCategories(mockpluggyClient, categoryPgRepo)
	listCategories := usecase.NewListCategories(categoryPgRepo)
	categoryHandler := handler.NewCategoryHandler(syncCategories, listCategories)
	pgxTX := tx.NewPgxTX(pool)
	budgetPgRepo := pgrepo.NewBudgetPgRepo(dbDB)
	upsertBudget := usecase.NewUpsertBudget(validatorValidator, pgxTX, budgetPgRepo)
	getBudget := usecase.NewGetBudget(validatorValidator, budgetPgRepo)
	deleteBudget := usecase.NewDeleteBudget(pgxTX, budgetPgRepo)
	budgetHandler := handler.NewBudgetHandler(upsertBudget, getBudget, deleteBudget)
	getUser := usecase.NewGetUser(userPgRepo)
	userHandler := handler.NewUserHandler(getUser)
	routerRouter := router.NewRouter(env, middlewareMiddleware, healthHandler, authHandler, calculatorHandler, institutionHandler, categoryHandler, budgetHandler, userHandler)
	app := newApp(env, middlewareMiddleware, routerRouter)
	return app
}
